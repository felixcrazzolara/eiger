load(allgentran)$

gentranlang:c;

/* Define the model parameters */
g      : 9.81$                 /* m/s^2  */
l_pole : 0.4$                  /* m      */
m_car  : 2$                    /* kg     */
m_pole : 0.5$                  /* kg     */
I_pole : 1/12*m_pole*l_pole^2$ /* kg*m^2 */

/* Introduce variables */

/* Define the position and velocity of the cart and the pole, respectively */
r_car  : [x,0]$                            /*  _____ <- phi = 0 */
r_pole : r_car + l/2*[cos(phi),sin(phi)]$  /* |_|               */

/* Define the generalized coordinates, velocities and accelerations */
q   : [x,phi]$        declare(q,scalar)$
dq  : [dx,dphi]$     declare(dq,scalar)$
ddq : [ddx,ddphi]$  declare(ddq,scalar)$

/* Compute the Jacobians */
J_tcar  : jacobian(r_car,q)$
J_tpole : jacobian(r_pole,q)$
J_rcar  : matrix([0,0])$
J_rpole : matrix([0,1])$

/* Compute the kinetic energy */
/* T = 0.5*\sum\limits_{i=1}^{N_b}m_i*|dr_i|^2 + w_i^T.I_i.w        | dr_i=d/dt*r_i=d/dq*r_i*d/dt*q=J_ti.dq, w_i=J_ri.dq
     = 0.5*\sum\limits_{i=1}^{N_b}m_i*dq^T.J_it^T.J_it.dq +  dq^T.J_ri^T.I_i.J_ri.dq */
T :     0.5*m_car* matrix(dq).transpose(J_tcar). J_tcar. transpose(matrix(dq))$
T : T + 0.5*m_pole*matrix(dq).transpose(J_tpole).J_tpole.transpose(matrix(dq)) + 0.5*I_pole*(matrix(dq).transpose(J_rpole)).(J_rpole.transpose(matrix(dq)))$

/* Compute the potential energy */
V : m_pole*g*r_pole[2]$

/* Compute the generalized force */
Qnc : -transpose(matrix([u,0]).jacobian(r_car,q))$

/* Formulate the Lagrangian equations */
/* d/dt*(d/ddq*T) - d/dq*T + d/dq*V + Qnc = 0 */
d_ddq_T      : jacobian([T],dq)$
d_dt_d_ddq_T : jacobian(args(d_ddq_T)[1],q).dq + jacobian(args(d_ddq_T)[1],dq).ddq$
L            : d_dt_d_ddq_T - transpose(jacobian([T],q)) + transpose(jacobian([V],q)) + Qnc$

/* Find the mass matrix and the RHS */
M : jacobian(args(transpose(L))[1],ddq)$
f : -(L - M.transpose(matrix(ddq)))$

/* Get the state-space terms */
Mss : mat_unblocker(diag_matrix(M,identfor(M)))$
fss : mat_unblocker(matrix([f],[transpose(matrix(dq))]))$

/* Linearize the state-space terms */
A : jacobian(args(transpose(invert(Mss).fss))[1],flatten([q,dq]))$
B : jacobian(args(transpose(invert(Mss).fss))[1],[u])$

gentranout("A");
gentran(literal("Hello",cr));
for r thru length(A[1]) do
    (for c thru length(A) do
        gentran(lrsetq(A[r,c],A[r,c]))
    );
gentranshut("A");
